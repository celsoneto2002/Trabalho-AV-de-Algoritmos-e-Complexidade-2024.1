#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int *arr;
    int n = 1000; 
    int i, j;
    clock_t start, end;
    double cpu_time_used;

    for (j = 0; j < 4; j++) { // Loop para aumentar o tamanho do vetor
        arr = (int *)malloc(n * sizeof(int));

        
        srand(time(NULL));
        for (i = 0; i < n; i++) {
            arr[i] = rand();
        }

        
        start = clock();
        quickSort(arr, 0, n - 1);
        end = clock();
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        printf("Quick Sort para vetor de tamanho %d: %f segundos\n", n, cpu_time_used);

        free(arr);

        
        n *= 10;
    }

    return 0;
}
